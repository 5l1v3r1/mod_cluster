dnl
dnl Process this file with autoconf to produce a configure script
dnl

AC_PREREQ(2.50)
AC_INIT(build/sight.m4)
AC_CONFIG_HEADER(include/arch/unix/sight_platform.h)
AC_CONFIG_AUX_DIR(build)

sinclude(build/apr_common.m4)
sinclude(build/find_apr.m4)
sinclude(build/sight.m4)
sinclude(build/java.m4)
sinclude(build/libtool.m4)
sinclude(build/ltsugar.m4)

dnl Generate ./config.nice for reproducing runs of configure
dnl
APR_CONFIG_NICE(config.nice)

dnl # Some initial steps for configuration.  We setup the default directory
dnl # and which files are to be configured.

dnl Absolute source/build directory
abs_srcdir=`(cd $srcdir && pwd)`
abs_builddir=`pwd`

if test "$abs_builddir" != "$abs_srcdir"; then
  USE_VPATH=1
  SIGHT_CONFIG_LOCATION=build
else
  SIGHT_CONFIG_LOCATION=source
fi

AC_SUBST(SIGHT_CONFIG_LOCATION)
AC_CANONICAL_SYSTEM
AC_PROG_INSTALL

dnl
dnl compute the top directory of the build
dnl note: this is needed for LIBTOOL and exporting the bundled Expat
dnl
top_builddir="$abs_builddir"
AC_SUBST(top_builddir)
AC_SUBST(abs_srcdir)
AC_SUBST(abs_builddir)

dnl Initialize mkdir -p functionality.
APR_MKDIR_P_CHECK($abs_srcdir/build/mkdir.sh)

dnl get our version information
get_version="$abs_srcdir/build/get-version.sh"
version_hdr="$abs_srcdir/include/sight_version.h"
SIGHT_MAJOR_VERSION="`$get_version major $version_hdr SIGHT`"
SIGHT_DOTTED_VERSION="`$get_version all $version_hdr SIGHT`"
SIGHT_LIBTOOL_VERSION="`$get_version libtool $version_hdr SIGHT`"

AC_SUBST(SIGHT_DOTTED_VERSION)
AC_SUBST(SIGHT_MAJOR_VERSION)
AC_SUBST(SIGHT_LIBTOOL_VERSION)

echo "SIGHT Version: ${SIGHT_DOTTED_VERSION}"

dnl Enable the layout handling code, then reparse the prefix-style
dnl arguments due to autoconf being a PITA.
APR_ENABLE_LAYOUT(sight)
APR_PARSE_ARGUMENTS

dnl
dnl set up the compilation flags and stuff
dnl

SIGHT_INCLUDES=""
SIGHT_PRIV_INCLUDES="-I$top_builddir/include -I$top_builddir/include/arch/unix"

dnl
dnl Find the APR includes directory and (possibly) the source (base) dir.
dnl
SIGHT_FIND_APR

dnl
dnl even though we use apr_rules.mk for building apr-util, we need
dnl to grab CC and CPP ahead of time so that apr-util config tests
dnl use the same compiler as APR; we need the same compiler options
dnl and feature test macros as well
dnl
APR_SETIFNULL(CC, `$apr_config --cc`)
APR_SETIFNULL(CPP, `$apr_config --cpp`)

AC_PROG_INSTALL

dnl
dnl  Find the JVM related information
dnl
JAVA_FIND_JDK

dnl MAC OS X does not used include but Headers
if test -d ${JAVA_HOME}/Headers; then
  JAVA_INC=Headers
else
  JAVA_INC=include
fi
APR_ADDTO(SIGHT_PRIV_INCLUDES,[-I$JAVA_HOME/$JAVA_INC])

JAVA_FIND_JDK_OS
if test -z "${JAVA_OS}"; then
  AC_MSG_RESULT([jni_md.h found in $JAVA_HOME/$JAVA_INC])
else
  APR_ADDTO(SIGHT_PRIV_INCLUDES,[-I$JAVA_HOME/$JAVA_INC/$JAVA_OS])
fi

AC_SUBST(JAVA_HOME)
AC_SUBST(JAVA_PLATFORM)
AC_SUBST(JAVA_OS)


so_ext=$APR_SO_EXT
lib_target=$APR_LIB_TARGET
AC_SUBST(so_ext)
AC_SUBST(lib_target)

SIGHT_LIBNAME="sight${libsuffix}"
AC_SUBST(SIGHT_LIBNAME)

dnl These added to allow default directories to be used...
DEFAULT_OSDIR="unix"
echo "(Default will be ${DEFAULT_OSDIR})"

EXTRA_OS_LINK=""
host_alias=`uname -s`
case "$host_alias" in
    dnl ### BeOS requires that ALL symbols resolve at LINK time!
    dnl ###
    dnl ### So, if we're building on BeOS then we need to add in the
    dnl ### apr and expat libraries to the build or it'll die a truly horrible
    dnl ### death. We now use the apr-config tool to determine the correct
    dnl ### library to link against :)
*AIX*|*Darwin*|*BeOS*)
    dnl need such stuff as -liconv to be specified when building libaprutil.la
    EXTRA_OS_LINK='$(SIGHT_LDFLAGS) $(SIGHT_LIBS)'
    ;;
*)
    ;;
esac

AC_SUBST(EXTRA_OS_LINK)

dnl CFLAGS for maintainer mode
dnl it also allows the CFLAGS environment variable.
CFLAGS="${CFLAGS}"
AC_ARG_ENABLE(
maintainer-mode,
[  --enable-maintainer-mode   Turn on debugging and compile time warnings],
[
  if test "$GCC" = "yes"; then
    CFLAGS="${CFLAGS} -DDEBUG -Wall"
  else
    CFLAGS="${CFLAGS} -DDEBUG"
  fi
AC_MSG_RESULT([...Enabling Maintainer mode...])
])

dnl
dnl Prep all the flags and stuff for compilation and export to other builds
dnl
APR_ADDTO(SIGHT_LIBS, [$LIBS])
APR_ADDTO(SIGHT_LIBS, [$APR_LIBS])
APR_ADDTO(SIGHT_LDFLAGS, [$LDFLAGS])

# Link libkstat for Solaris
case $host in
    *-solaris2*)
        APR_ADDTO(SIGHT_LIBS, -lkstat)
        APR_ADDTO(SIGHT_LIBS, -lproc)
        ;;
    *)
        ;;
esac

AC_SUBST(SIGHT_EXPORT_LIBS)
AC_SUBST(SIGHT_PRIV_INCLUDES)
AC_SUBST(SIGHT_INCLUDES)
AC_SUBST(SIGHT_LDFLAGS)
AC_SUBST(SIGHT_LIBS)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)

OBJECTS_PLATFORM='$(OBJECTS_unix)'

echo "Checking for platform ..."
case $host in
   i386-ibm-aix* | *-ibm-aix[1-2].* | *-ibm-aix3.* | *-ibm-aix4.1 | *-ibm-aix4.1.* | *-ibm-aix4.2 | *-ibm-aix4.2.*)
       OSDIR="aix"
       OBJECTS_PLATFORM='$(OBJECTS_aix)'
       ;;
   *os390)
       OSDIR="os390"
       OBJECTS_PLATFORM='$(OBJECTS_os390)'
       ;;
   *os400)
       OSDIR="os400"
       OBJECTS_PLATFORM='$(OBJECTS_os400)'
       ;;
   *mingw*)
       OSDIR="windows"
       OBJECTS_PLATFORM='$(OBJECTS_windows)'
       ;;
   *cygwin*)
       OSDIR="linux"
       OBJECTS_PLATFORM='$(OBJECTS_linux)'
       ;;
   *hpux10* ) 
       OSDIR="hpux"
       OBJECTS_PLATFORM='$(OBJECTS_hpux)'
       ;;
   *linux*)
       OSDIR="linux"
       OBJECTS_PLATFORM='$(OBJECTS_linux)'
       ;;
   *-sun-solaris*)
       OSDIR="solaris"
       OBJECTS_PLATFORM='$(OBJECTS_solaris)'
       ;;
   *-pc-solaris*)
       OSDIR="solaris"
       OBJECTS_PLATFORM='$(OBJECTS_solaris)'
       ;;
   *)
       OSDIR="unix"
       ;;
esac

AC_SUBST(OBJECTS_PLATFORM)
echo "(Platform is $OSDIR)"

dnl copy apr's rules.mk into our build directory.
if test ! -d ./build; then
   $mkdir_p build
fi
cp $APR_BUILD_DIR/apr_rules.mk $abs_builddir/build/rules.mk


dnl
dnl BSD/OS (BSDi) needs to use a different include syntax in the Makefiles
dnl
case "$host_alias" in
*bsdi* | BSD/OS)
    # Check whether they've installed GNU make
    if make --version > /dev/null 2>&1; then
        INCLUDE_RULES="include $abs_builddir/build/rules.mk"
        INCLUDE_OUTPUTS="include $abs_srcdir/build-outputs.mk"
    else
        INCLUDE_RULES=".include \"$abs_builddir/build/rules.mk\""
        INCLUDE_OUTPUTS=".include \"$abs_srcdir/build-outputs.mk\""
    fi
    ;;
*)
    INCLUDE_RULES="include $abs_builddir/build/rules.mk"
    INCLUDE_OUTPUTS="include $abs_srcdir/build-outputs.mk"
    ;;
esac

AC_SUBST(INCLUDE_RULES)
AC_SUBST(INCLUDE_OUTPUTS)

AC_CHECK_HEADERS([netinet/tcp.h])
dnl ----------------------------- Checking for missing POSIX thread functions
AC_CHECK_FUNCS([getpwnam_r getpwuid_r getgrnam_r getgrgid_r getpgid])


if test -d $srcdir/test; then
    test_Makefile="test/Makefile"
fi

dnl
dnl everthing is done.
MAKEFILES="Makefile"
AC_OUTPUT([
    sight.pc
    $MAKEFILES
	],[
SIGHT_MAJOR_VERSION=$SIGHT_MAJOR_VERSION
])
